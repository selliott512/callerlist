<?php
// This is included by various other files in CallerList.

include_once "settings.php";

// The version.  This is not currently used.  It should be kept sync with
// doc/VERSION
$version = "1.1.0";

// Start the session here before possible output generated by the connection
// to the database (session_start() may generate a header).
session_start();

// Types of databases.
define("CL_DB_NONE", 0);
define("CL_DB_MYSQL", 1);
define("CL_DB_PGSQL", 2);

// Determine what type of database it is as a function of the $pdo_dsn prefix.
$pdo_prefix = strtok($pdo_dsn, ":");
switch ($pdo_prefix)
{
    case "mysql":
        $dbType = CL_DB_MYSQL;
        break;
    case "pgsql":
        $dbType = CL_DB_PGSQL;
        break;
    default:
        $dbType = CL_DB_NONE;
}

// Establish the database connection.

// Later AJAX code will look at $dbConn->connect_errno and retun a small XML
// file in the failed case.
try
{
    // TODO: Try persistent connections.
    $dbConn = new PDO($pdo_dsn, $dbuser, $dbpass,
        array(PDO::ATTR_PERSISTENT => true));
    if (strlen($dbschema) && ($dbType == CL_DB_PGSQL))
    {
        $dbschemaQ = quoteMySQLStyle($dbschema);
    	$dbConn->query("SET search_path = '$dbschemaQ'");
    }
    unset($dbConnError);
}
catch (PDOException $e)
{
    $dbConnError = $e;
}

// Some timezone must be set for the date() function.  Hopefully the correct
// TZ is set via date.timezone in php*.ini.
error_reporting (E_ALL ^ (E_WARNING | E_NOTICE));
date_default_timezone_set(date_default_timezone_get());
error_reporting (E_ALL ^ E_NOTICE);

// Common functions.

function getMsec()
{
    list($usec, $sec) = explode(" ", microtime());
    return  $sec . substr($usec, 2, 3);
}

function clLog($msg)
{
    global $debug;

    if (!$debug)
    {
        return;
    }

    $dateStr = date('[D M j H:i:s Y]');
    $sis = substr(session_id(), -5); // SIS - Session Id Suffix.
    file_put_contents("php://stderr", "$dateStr CallerList: SIS=$sis $msg\n");
}

function getLastError()
{
	global $dbConn;

	$info = $dbConn->errorInfo();
	return $info[2];
}

// Unlike real_escape_string() PDO::quote() adds a leading and trailing "'" so
// that the string may be placed in SQL.  But that's already handled in the
// queries.
function quoteMySQLStyle($strRaw)
{
    global $dbConn;

    $str = $dbConn->quote($strRaw);

    $len = strlen($str);
    if ($len < 2)
    {
    	// Maybe it did not add the 's in this case.
        return $str;
    }

    $start = 0;
    if ($str[0] == "'")
    {
        $start++;
        $len--;
    }

    if ($str[$start + $len - 1] == "'")
    {
        $len--;
    }

    return substr($str, $start, $len);
}

// Session management.  Each page that is protected via BasicAuth sets its
// level.

// This is one approach to having something like an enumeration.
define("CL_AUTH_NONE", 0);;
define("CL_AUTH_CREW", 1);
define("CL_AUTH_SCREENER", 2);
define("CL_AUTH_ADMIN", 3);

// A base level.  All CallerList code should be able to refer to the level
// point forward without isset().
if (!isset($_SESSION["cl_auth"]))
{
    $_SESSION["cl_auth"] = CL_AUTH_NONE;
}

// Undo the damage done by magic quoting.
if (get_magic_quotes_gpc())
{
    foreach($_POST as &$pVal)
    {
        $pVal = stripslashes($pVal);
    }
}

?>
